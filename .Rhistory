ifelse(destinations$refToGreenspaceSite != NaN, 'Park')
ifelse(destinations$refToGreenspaceSite != NaN, 'Park', destinations$groupname)
ifelse(destinations$refToGreenspaceSite == NaN, 'Park', destinations$groupname)
ifelse(destinations$refToGreenspaceSite = NaN, 'Park', destinations$groupname)
ifelse(destinations$refToGreenspaceSite != NaN, destinations$groupname, 'Park')
ifelse(destinations$refToGreenspaceSite != NA, destinations$groupname, 'Park')
# fill in NAs
test = destinations
test$groupname = ifelse(destinations$groupname != NA, destinations$groupname, 'Park')
head(test)
test %>% filter(refToGreenspaceSite != NA)
test %>% filter(refToGreenspaceSite != NaN)
destinations = st_read('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/2022_gisruk/2022_gisruk/data/destinations.gpkg',
layer = 'destinations')
# fill in NAs
test = destinations
test$groupname = ifelse(destinations$groupname != "<NA>", destinations$groupname, 'Park')
test %>% filter(groupname == 'Park')
head(test)
test$groupname = ifelse(destinations$groupname != <NA>, destinations$groupname, 'Park')
test$groupname = ifelse(destinations$refToGreenspaceSite != "<NA>", destinations$groupname, 'Park')
test %>% filter(groupname == 'Park')
test$groupname = ifelse(destinations$refToGreenspaceSite != NA, destinations$groupname, 'Park')
test %>% filter(groupname == 'Park')
head(destinations)
table(destinations$groupname)
table(is.na(destinations$groupname))
ifelse(is.na(destinations$refToGreenspaceSite), destinations$groupname, 'Park')
test$groupname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$groupname, 'Park')
test %>% filter(groupname == 'Park')
test$groupname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$groupname, 'Park')
test$categoryname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$categoryname, 'Park')
test$classname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$classname, 'Park')
test %>% filter(groupname == 'Park')
destinations$groupname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$groupname, 'Park')
destinations$categoryname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$categoryname, 'Park')
destinations$classname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$classname, 'Park')
tm_shape(destinations) +
tm_dots(col = 'groupname')
unique(destinations$groupname)
length(unique(destinations$groupname))
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#001219', '#001219','#001219','#001219','#001219','#001219'))
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#001219', '#0A9396','#E9D8A6','#EE9B00','#BB3E03','#9B2226'))
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'))
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('groupname', 'classname'))
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
)
head(destinations)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname')
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname')
destinations = st_read('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/2022_gisruk/2022_gisruk/data/destinations.gpkg',
layer = 'destinations')
# fill in NAs
destinations$groupname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$groupname, 'Park entrance')
destinations$categoryname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$categoryname, 'Park entrance')
destinations$classname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$classname, 'Park entrance')
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname')
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname') +
tm_view(dot.size.fixed = TRUE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname') +
tm_view(dot.size.fixed = FALSE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 5) +
tm_view(dot.size.fixed = FALSE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 1) +
tm_view(dot.size.fixed = FALSE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.5) +
tm_view(dot.size.fixed = FALSE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.5) +
tm_view(dot.size.fixed = TRUE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.01) +
tm_view(dot.size.fixed = TRUE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.05) +
tm_view(dot.size.fixed = TRUE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.05) +
tm_view(dot.size.fixed = FALSE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.05) +
tm_view(dot.size.fixed = FALSE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.05) +
tm_view(dot.size.fixed = FALSE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.05) +
tm_view(dot.size.fixed = FALSE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.05) +
tm_view(dot.size.fixed = FALSE)
# plot data
tmap_mode('plot')
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.05) +
tm_view(dot.size.fixed = FALSE)
# plot data
tmap_mode('view')
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.05) +
tm_view(dot.size.fixed = FALSE)
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/website/map_test')
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.05) +
tm_view(dot.size.fixed = FALSE)
# load libraries
library(tmap)
library(spData)
library(dplyr)
# load data
adults_i = st_read('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/2022_gisruk/2022_gisruk/results/access_score_adults.gpkg',
layer = 'access_score_adults')
seniors_i = st_read('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/2022_gisruk/2022_gisruk/results/access_score_seniors.gpkg',
layer = 'access_score_seniors')
# prepare data (add quantiles)
adults_i$quartile = ntile(adults_i$access_score, 4)
adults_i$access_cat = ifelse(adults_i$quartile == 1, 'low access',
ifelse(adults_i$quartile == 2, 'mid-low access',
ifelse(adults_i$quartile == 3, 'mid-high access',
'high access')))
# separate into layers
low_access = adults_i %>% filter(access_cat == 'low access')
mid_low_access = adults_i %>% filter(access_cat == 'mid-low access')
mid_high_access = adults_i %>% filter(access_cat == 'mid-high access')
high_access = adults_i %>% filter(access_cat == 'high access')
# map
m_low = tm_shape(low_access) +
tm_dots(col = '#ae2012',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midlow = tm_shape(mid_low_access) +
tm_dots(col = '#ee9b00',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midhigh = tm_shape(mid_high_access) +
tm_dots(col = '#94d2bd',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_high = tm_shape(high_access) +
tm_dots(col = '#005f73',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
(map_adults = m_low +
m_midlow +
m_midhigh +
m_high +
tm_add_legend(labels = c('Low access', 'Mid-low access', 'Mid-high access', 'High access'),
col = c('#ae2012','#ee9b00','#94d2bd','#005f73')) +
tm_view(symbol.size.fixed = TRUE))
tmap_mode('view')
(map_adults = m_low +
m_midlow +
m_midhigh +
m_high +
tm_add_legend(labels = c('Low access', 'Mid-low access', 'Mid-high access', 'High access'),
col = c('#ae2012','#ee9b00','#94d2bd','#005f73')) +
tm_view(symbol.size.fixed = TRUE))
seniors_i$quartile = ntile(seniors_i$access_score, 4)
(map_seniors = m_low +
m_midlow +
m_midhigh +
m_high +
tm_add_legend(labels = c('Low access', 'Mid-low access', 'Mid-high access', 'High access'),
col = c('#ae2012','#ee9b00','#94d2bd','#005f73')) +
tm_view(symbol.size.fixed = TRUE))
seniors_i$quartile = ntile(seniors_i$access_score, 4)
seniors_i$access_cat = ifelse(seniors_i$quartile == 1, 'low access',
ifelse(seniors_i$quartile == 2, 'mid-low access',
ifelse(seniors_i$quartile == 3, 'mid-high access',
'high access')))
# separate into layers
low_access = seniors_i %>% filter(access_cat == 'low access')
mid_low_access = seniors_i %>% filter(access_cat == 'mid-low access')
mid_high_access = seniors_i %>% filter(access_cat == 'mid-high access')
high_access = seniors_i %>% filter(access_cat == 'high access')
# map
m_low = tm_shape(low_access) +
tm_dots(col = '#ae2012',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midlow = tm_shape(mid_low_access) +
tm_dots(col = '#ee9b00',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midhigh = tm_shape(mid_high_access) +
tm_dots(col = '#94d2bd',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_high = tm_shape(high_access) +
tm_dots(col = '#005f73',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
(map_seniors = m_low +
m_midlow +
m_midhigh +
m_high +
tm_add_legend(labels = c('Low access', 'Mid-low access', 'Mid-high access', 'High access'),
col = c('#ae2012','#ee9b00','#94d2bd','#005f73')) +
tm_view(symbol.size.fixed = TRUE))
(map_adults = m_low +
m_midlow +
m_midhigh +
m_high +
tm_add_legend(labels = c('Low access', 'Mid-low access', 'Mid-high access', 'High access'),
col = c('#ae2012','#ee9b00','#94d2bd','#005f73')) +
tm_view(symbol.size.fixed = TRUE))
adults_i$quartile = ntile(adults_i$access_score, 4)
adults_i$access_cat = ifelse(adults_i$quartile == 1, 'low access',
ifelse(adults_i$quartile == 2, 'mid-low access',
ifelse(adults_i$quartile == 3, 'mid-high access',
'high access')))
# separate into layers
low_access = adults_i %>% filter(access_cat == 'low access')
mid_low_access = adults_i %>% filter(access_cat == 'mid-low access')
mid_high_access = adults_i %>% filter(access_cat == 'mid-high access')
high_access = adults_i %>% filter(access_cat == 'high access')
# map
m_low = tm_shape(low_access) +
tm_dots(col = '#ae2012',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midlow = tm_shape(mid_low_access) +
tm_dots(col = '#ee9b00',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midhigh = tm_shape(mid_high_access) +
tm_dots(col = '#94d2bd',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_high = tm_shape(high_access) +
tm_dots(col = '#005f73',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
(map_adults = m_low +
m_midlow +
m_midhigh +
m_high +
tm_add_legend(labels = c('Low access', 'Mid-low access', 'Mid-high access', 'High access'),
col = c('#ae2012','#ee9b00','#94d2bd','#005f73')) +
tm_view(symbol.size.fixed = TRUE))
# results seniors
# prepare data (add quantiles)
seniors_i$quartile = ntile(seniors_i$access_score, 4)
seniors_i$access_cat = ifelse(seniors_i$quartile == 1, 'low access',
ifelse(seniors_i$quartile == 2, 'mid-low access',
ifelse(seniors_i$quartile == 3, 'mid-high access',
'high access')))
# separate into layers
low_access = seniors_i %>% filter(access_cat == 'low access')
mid_low_access = seniors_i %>% filter(access_cat == 'mid-low access')
mid_high_access = seniors_i %>% filter(access_cat == 'mid-high access')
high_access = seniors_i %>% filter(access_cat == 'high access')
# map
m_low = tm_shape(low_access) +
tm_dots(col = '#ae2012',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midlow = tm_shape(mid_low_access) +
tm_dots(col = '#ee9b00',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midhigh = tm_shape(mid_high_access) +
tm_dots(col = '#94d2bd',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_high = tm_shape(high_access) +
tm_dots(col = '#005f73',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
(map_seniors = m_low +
m_midlow +
m_midhigh +
m_high +
tm_add_legend(labels = c('Low access', 'Mid-low access', 'Mid-high access', 'High access'),
col = c('#ae2012','#ee9b00','#94d2bd','#005f73')) +
tm_view(symbol.size.fixed = TRUE))
# load data
adults_i = st_read('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/2022_gisruk/2022_gisruk/results/access_score_adults.gpkg',
layer = 'access_score_adults')
seniors_i = st_read('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/2022_gisruk/2022_gisruk/results/access_score_seniors.gpkg',
layer = 'access_score_seniors')
# results adults
# prepare data (add quantiles)
adults_i$quartile = ntile(adults_i$access_score, 4)
adults_i$access_cat = ifelse(adults_i$quartile == 1, 'low access',
ifelse(adults_i$quartile == 2, 'mid-low access',
ifelse(adults_i$quartile == 3, 'mid-high access',
'high access')))
# separate into layers
low_access = adults_i %>% filter(access_cat == 'low access')
mid_low_access = adults_i %>% filter(access_cat == 'mid-low access')
mid_high_access = adults_i %>% filter(access_cat == 'mid-high access')
high_access = adults_i %>% filter(access_cat == 'high access')
# map
m_low = tm_shape(low_access) +
tm_dots(col = '#ae2012',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midlow = tm_shape(mid_low_access) +
tm_dots(col = '#ee9b00',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midhigh = tm_shape(mid_high_access) +
tm_dots(col = '#94d2bd',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_high = tm_shape(high_access) +
tm_dots(col = '#005f73',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
(map_adults = m_low +
m_midlow +
m_midhigh +
m_high +
tm_add_legend(labels = c('Low access', 'Mid-low access', 'Mid-high access', 'High access'),
col = c('#ae2012','#ee9b00','#94d2bd','#005f73')) +
tm_view(symbol.size.fixed = TRUE))
# load libraries
library(tmap)
library(spData)
library(dplyr)
# load data
destinations = st_read('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/2022_gisruk/2022_gisruk/data/destinations.gpkg',
layer = 'destinations')
# fill in NAs
destinations$groupname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$groupname, 'Park entrance')
destinations$categoryname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$categoryname, 'Park entrance')
destinations$classname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$classname, 'Park entrance')
# plot data
tmap_mode('view')
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.05) +
tm_view(dot.size.fixed = FALSE)
uktus15_diary_ep_long <- read.delim("C:/Users/b9066009/Documents/PhD/data/time_use_survey/tab/uktus15_diary_ep_long.tab")
View(uktus15_diary_ep_long)
uktus15_diary_wide <- read.delim("C:/Users/b9066009/Documents/PhD/data/time_use_survey/tab/uktus15_diary_wide.tab")
View(uktus15_diary_wide)
uktus15_dv_time_vars <- read.delim("C:/Users/b9066009/Documents/PhD/data/time_use_survey/tab/uktus15_dv_time_vars.tab")
View(uktus15_dv_time_vars)
uktus15_household <- read.delim("C:/Users/b9066009/Documents/PhD/data/time_use_survey/tab/uktus15_household.tab")
View(uktus15_household)
uktus15_individual <- read.delim("C:/Users/b9066009/Documents/PhD/data/time_use_survey/tab/uktus15_individual.tab")
View(uktus15_individual)
uktus15_wksched <- read.delim("C:/Users/b9066009/Documents/PhD/data/time_use_survey/tab/uktus15_wksched.tab")
View(uktus15_wksched)
library(dplyr)
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
library(dplyr)
update.packages('rlang')
library(dplyr)
install.packages('rlang')
install.packages("rlang")
library(dplyr)
library(dplyr)
library(dplyr)
install.packages('rlang')
install.packages("rlang")
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
remove.packages('rlang')
df <- read.csv("https://query.data.world/s/6k53ykf7me3ckw4ju4qqj5nj3xzr7m", header=TRUE, stringsAsFactors=FALSE);
setwd('C:/Users/b9066009/Documents/PhD/01_access_morphometrics/ERSA2022_demo')
options(java.parameters = "-Xmx8G") # set up memory
# load libraries
library(osmextract)
library(sfarrow)
library(sf)
library(r5r)
library(dplyr)
library(tidyverse)
library(rgdal)
# load data
origins = st_read_parquet('./data/centroids.parquet') # load origins
# load data
origins = st_read_parquet('./data/centroids.parquet') # load origins
origins = st_transform(origins, crs = 4326)
origins = origins %>% rename(id = X__index_level_0__)
origins <- origins %>%
mutate(lon = unlist(map(origins$geometry,1)),
lat = unlist(map(origins$geometry,2)))
origins = st_set_geometry(origins,NULL)
# r5r setup
r5r_core = setup_r5('./data/pbf', elevation = 'TOBLER', overwrite = F)
# set up parametres
departure_datetime <- as.POSIXct("13-05-2019 14:00:00",
format = "%d-%m-%Y %H:%M:%S")
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = origins,
destinations = origins,
mode = 'WALK',
departure_datetime = departure_datetime,
max_walk_dist = 2000,
max_trip_duration = 15,
verbose = FALSE,
walk_speed = 4.5
)
ttm_seniors <- travel_time_matrix(r5r_core = r5r_core,
origins = origins,
destinations = origins,
mode = 'WALK',
departure_datetime = departure_datetime,
max_walk_dist = 2000,
max_trip_duration = 15,
verbose = FALSE,
walk_speed = 3.2
)
head(ttm)
ttm %>% count(from_id)
head(origins)
unique(origins$id)
length(unique(origins$id))
ttm %>% count(from_id)
ttm %>% count(from_id) %%> rename(access_score = n)
ttm %>% count(from_id) %>% rename(access_score = n)
access_score_adults = ttm %>% count(from_id) %>% rename(access_score = n)
access_score_seniors = ttm_seniors %>% count(from_id)
#destinations = st_read_parquet('./data/amenities.parquet') # load destinations
hexagons = st_read_parquet('./data/hexagons.parquet') # load polygons layer
merge(hexagons, access_score_adults, by.x = 'hex_id', by.y = 'from_id') # merge
access_score_adults = ttm %>% count(from_id) %>% rename(score_adults = n)
access_score_seniors = ttm_seniors %>% count(from_id) %>% rename(score_seniors = n)
merge(hexagons, access_score_adults, by.x = 'hex_id', by.y = 'from_id') # merge
results = merge(hexagons, access_score_adults, by.x = 'hex_id', by.y = 'from_id') # merge
results = merge(hexagons, access_score_seniors, by.x = 'hex_id', by.y = 'from_id') # merge
head(results)
results = merge(results, access_score_seniors, by.x = 'hex_id', by.y = 'from_id') # merge
head(results)
st_write_parquet(hexagons, './results/hexagons_access_test.parquet') # save to parquet
head(hexagons)
st_write_parquet(results, './results/hexagons_access_test.parquet') # save to parquet
head(results)
rm(results)
results = merge(hexagons, access_score_adults, by.x = 'hex_id', by.y = 'from_id') # merge
head(results)
results = merge(results, access_score_seniors, by.x = 'hex_id', by.y = 'from_id') # merge
head(results)
st_write_parquet(results, './results/hexagons_access_test.parquet') # save to parquet
stop_r5(r5r_core)
rJava::.jgc(R.gc = TRUE)
