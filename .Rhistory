# separate into layers
low_access = seniors_i %>% filter(access_cat == 'low access')
mid_low_access = seniors_i %>% filter(access_cat == 'mid-low access')
mid_high_access = seniors_i %>% filter(access_cat == 'mid-high access')
high_access = seniors_i %>% filter(access_cat == 'high access')
# map
m_low = tm_shape(low_access) +
tm_dots(col = '#ae2012',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midlow = tm_shape(mid_low_access) +
tm_dots(col = '#ee9b00',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midhigh = tm_shape(mid_high_access) +
tm_dots(col = '#94d2bd',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_high = tm_shape(high_access) +
tm_dots(col = '#005f73',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
(map_seniors = m_low +
m_midlow +
m_midhigh +
m_high +
tm_add_legend(labels = c('Low access', 'Mid-low access', 'Mid-high access', 'High access'),
col = c('#ae2012','#ee9b00','#94d2bd','#005f73')) +
tm_view(symbol.size.fixed = TRUE))
# load data
adults_i = st_read('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/2022_gisruk/2022_gisruk/results/access_score_adults.gpkg',
layer = 'access_score_adults')
seniors_i = st_read('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/2022_gisruk/2022_gisruk/results/access_score_seniors.gpkg',
layer = 'access_score_seniors')
# results adults
# prepare data (add quantiles)
adults_i$quartile = ntile(adults_i$access_score, 4)
adults_i$access_cat = ifelse(adults_i$quartile == 1, 'low access',
ifelse(adults_i$quartile == 2, 'mid-low access',
ifelse(adults_i$quartile == 3, 'mid-high access',
'high access')))
# separate into layers
low_access = adults_i %>% filter(access_cat == 'low access')
mid_low_access = adults_i %>% filter(access_cat == 'mid-low access')
mid_high_access = adults_i %>% filter(access_cat == 'mid-high access')
high_access = adults_i %>% filter(access_cat == 'high access')
# map
m_low = tm_shape(low_access) +
tm_dots(col = '#ae2012',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midlow = tm_shape(mid_low_access) +
tm_dots(col = '#ee9b00',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midhigh = tm_shape(mid_high_access) +
tm_dots(col = '#94d2bd',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_high = tm_shape(high_access) +
tm_dots(col = '#005f73',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
(map_adults = m_low +
m_midlow +
m_midhigh +
m_high +
tm_add_legend(labels = c('Low access', 'Mid-low access', 'Mid-high access', 'High access'),
col = c('#ae2012','#ee9b00','#94d2bd','#005f73')) +
tm_view(symbol.size.fixed = TRUE))
# load libraries
library(tmap)
library(spData)
library(dplyr)
# load data
destinations = st_read('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/2022_gisruk/2022_gisruk/data/destinations.gpkg',
layer = 'destinations')
# fill in NAs
destinations$groupname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$groupname, 'Park entrance')
destinations$categoryname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$categoryname, 'Park entrance')
destinations$classname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$classname, 'Park entrance')
# plot data
tmap_mode('view')
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.05) +
tm_view(dot.size.fixed = FALSE)
uktus15_diary_ep_long <- read.delim("C:/Users/b9066009/Documents/PhD/data/time_use_survey/tab/uktus15_diary_ep_long.tab")
View(uktus15_diary_ep_long)
uktus15_diary_wide <- read.delim("C:/Users/b9066009/Documents/PhD/data/time_use_survey/tab/uktus15_diary_wide.tab")
View(uktus15_diary_wide)
uktus15_dv_time_vars <- read.delim("C:/Users/b9066009/Documents/PhD/data/time_use_survey/tab/uktus15_dv_time_vars.tab")
View(uktus15_dv_time_vars)
uktus15_household <- read.delim("C:/Users/b9066009/Documents/PhD/data/time_use_survey/tab/uktus15_household.tab")
View(uktus15_household)
uktus15_individual <- read.delim("C:/Users/b9066009/Documents/PhD/data/time_use_survey/tab/uktus15_individual.tab")
View(uktus15_individual)
uktus15_wksched <- read.delim("C:/Users/b9066009/Documents/PhD/data/time_use_survey/tab/uktus15_wksched.tab")
View(uktus15_wksched)
library(dplyr)
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
library(dplyr)
update.packages('rlang')
library(dplyr)
install.packages('rlang')
install.packages("rlang")
library(dplyr)
library(dplyr)
library(dplyr)
install.packages('rlang')
install.packages("rlang")
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
remove.packages('rlang')
setwd('C:/Users/b9066009/Documents/PhD/01_access_morphometrics/ERSA2022_demo')
library(osmextract)
library(sfarrow)
library(sf)
library(r5r)
library(dplyr)
library(tidyverse)
library(rgdal)
# load/get data
sa_buf = st_read_parquet('./data/sa_buf.parquet') # study area boundaries
centroids = st_read_parquet('./data/centroids.parquet') # our origins and destinations
centroids = st_transform(centroids, crs = 4326)
centroids = centroids %>% rename(id = X__index_level_0__)
centroids <- centroids %>%
mutate(lon = unlist(map(centroids$geometry,1)),
lat = unlist(map(centroids$geometry,2)))
centroids = st_set_geometry(centroids,NULL)
# r5r setup
options(java.parameters = "-Xmx2G")
library(r5r)
# r5r setup
r5r_core <- setup_r5('./data/pbf')
# set inputs
mode <- c("WALK")
mode <- c("WALK")
max_walk_dist <- 1125
max_trip_duration <- 15
departure_datetime <- as.POSIXct("13-05-2019 14:00:00",
format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = centroids,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
verbose = FALSE)
head(ttm)
# accessibility score based on how many points can be accessed within 20 min
access_score = as.data.frame(table(ttm$from_id))
# merge access score with polygons layer
hexagons = st_read_parquet('./data/hexagons.parquet') # load polygons layer
hexagons = merge(hexagons, access_score, by.x = 'hex_id', by.y = 'Var1') # merge
head(hexagons)
hexagons %>% rename('access_adults' = 'Freq') # rename variable
st_write_parquet(hexagons, './results/hexagons_access.parquet') # save to parquet
stop_r5(r5r_core)
rJava::.jgc(R.gc = TRUE)
options(java.parameters = "-Xmx2G")
# set inputs
mode <- c("WALK")
max_walk_dist <- 800
max_trip_duration <- 15
departure_datetime <- as.POSIXct("13-05-2019 14:00:00",
format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = centroids,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
verbose = FALSE)
head(ttm)
# r5r setup
r5r_core <- setup_r5('./data/pbf')
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = centroids,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
verbose = FALSE)
head(ttm)
# accessibility score based on how many points can be accessed within 20 min
access_score = as.data.frame(table(ttm$from_id))
head(hexagons)
max_walk_dist <- 1125
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = centroids,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
verbose = FALSE)
data_path <- system.file("extdata/poa", package = "r5r")
list.files(data_path)
# accessibility score based on how many points can be accessed within 20 min
access_score_adults = as.data.frame(table(ttm$from_id))
head(access_score_adults)
# merge access score with polygons layer
hexagons = st_read_parquet('./data/hexagons.parquet') # load polygons layer
head(hexagons)
hexagons = merge(hexagons, access_score_adults, by.x = 'hex_id', by.y = 'Var1') # merge
hexagons = hexagons %>% rename('access_adults' = 'Freq') # rename variable
head(hexagons)
max_walk_dist <- 800
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = centroids,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
verbose = FALSE)
# accessibility score based on how many points can be accessed within 20 min
access_score_seniors = as.data.frame(table(ttm$from_id))
merge(hexagons, access_score_adults, by.x = 'hex_id', by.y = 'Var1')
merge(hexagons, access_score_seniors, by.x = 'hex_id', by.y = 'Var1')
hexagons = merge(hexagons, access_score_seniors, by.x = 'hex_id', by.y = 'Var1') # merge
hexagons = hexagons %>% rename('access_seniors' = 'Freq') # rename variable
head(hexagons)
hexagons$dif = hexagons$access_adults - hexagons$access_seniors
hexagons %>% filter(dif != 0)
max_trip_duration <- 10
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = centroids,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
verbose = FALSE)
head(ttm)
# accessibility score based on how many points can be accessed within 20 min
access_score_seniors = as.data.frame(table(ttm$from_id))
head(hexagons)
hexagons[,-c(4)]
hexagons = hexagons[,-c(4)]
hexagons = merge(hexagons, access_score_seniors, by.x = 'hex_id', by.y = 'Var1') # merge
hexagons = hexagons %>% rename('access_seniors' = 'Freq') # rename variable
head(hexagons)
hexagons[,-c(4)]
hexagons = hexagons[,-c(4)]
hexagons$dif = hexagons$access_adults - hexagons$access_seniors
hexagons %>% filter(dif != 0)
st_write_parquet(hexagons, './results/hexagons_access.parquet') # save to parquet
destinations = hexagons[25,]
# detailed itineraries
origins = hexagons[4,]
max_walk_dist = 10000
dit <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
shortest_path = FALSE,
verbose = FALSE)
origins
# detailed itineraries
origins = centroids[4,]
destinations = centroids[25,]
dit <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
shortest_path = FALSE,
verbose = FALSE)
head(dit)
# extract OSM network
street_net <- street_network_to_sf(r5r_core)
# plot
ggplot() +
geom_sf(data = street_net$edges, color='gray85') +
geom_sf(data = dit, aes(color=mode)) +
facet_wrap(.~option) +
theme_void()
# detailed itineraries
origins = centroids[24,]
destinations = centroids[25,]
max_walk_dist = 10000
dit <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
shortest_path = FALSE,
verbose = FALSE)
head(dit)
# detailed itineraries
origins = centroids[485,]
destinations = centroids[25,]
max_walk_dist = 10000
dit <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
shortest_path = FALSE,
verbose = FALSE)
head(dit)
# detailed itineraries
origins = centroids[86,]
destinations = centroids[25,]
max_walk_dist = 10000
dit <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
shortest_path = FALSE,
verbose = FALSE)
head(dit)
origins
destinations
# detailed itineraries
origins = centroids[4,]
destinations = centroids[25,]
max_walk_dist = 10000
dit <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
shortest_path = FALSE,
verbose = FALSE)
head(dit)
# detailed itineraries
origins = centroids[1,]
dit <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
shortest_path = FALSE,
verbose = FALSE)
head(dit)
# detailed itineraries
origins = centroids[36,]
destinations = centroids[25,]
dit <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
shortest_path = FALSE,
verbose = FALSE)
head(dit)
# plot
ggplot() +
geom_sf(data = street_net$edges, color='gray85') +
geom_sf(data = dit, aes(color=mode)) +
facet_wrap(.~option) +
theme_void()
centroids
# detailed itineraries
dit <- detailed_itineraries(r5r_core = r5r_core,
origins = centroids[4,],
destinations = centroids[25,],
mode = 'WALK',
departure_datetime = departure_datetime,
max_walk_dist = 10000,
shortest_path = FALSE,
verbose = FALSE)
head(dit)
# detailed itineraries
dit <- detailed_itineraries(r5r_core = r5r_core,
origins = centroids[27,],
destinations = centroids[25,],
mode = 'WALK',
departure_datetime = departure_datetime,
max_walk_dist = 10000,
shortest_path = FALSE,
verbose = FALSE)
head(dit)
poi <- fread(file.path(data_path, "poa_points_of_interest.csv"))
options(java.parameters = "-Xmx2G")
library(r5r)
library(sf)
library(data.table)
library(ggplot2)
library(mapview)
mapviewOptions(platform = 'leafgl')
data_path <- system.file("extdata/poa", package = "r5r")
poi <- fread(file.path(data_path, "poa_points_of_interest.csv"))
points <- fread(file.path(data_path, "poa_hexgrid.csv"))
points <- points[ c(sample(1:nrow(points), 10, replace=TRUE)), ]
stop_r5(r5r_core)
rJava::.jgc(R.gc = TRUE)
options(java.parameters = "-Xmx2G")
library(r5r)
library(sf)
library(data.table)
library(ggplot2)
library(mapview)
mapviewOptions(platform = 'leafgl')
data_path <- system.file("extdata/poa", package = "r5r")
poi <- fread(file.path(data_path, "poa_points_of_interest.csv"))
points <- fread(file.path(data_path, "poa_hexgrid.csv"))
points <- points[ c(sample(1:nrow(points), 10, replace=TRUE)), ]
# Indicate the path where OSM and GTFS data are stored
r5r_core <- setup_r5(data_path = data_path, verbose = FALSE)
# set inputs
origins <- poi[10,]
destinations <- poi[12,]
mode <- c("WALK", "TRANSIT")
max_walk_dist <- 10000
departure_datetime <- as.POSIXct("13-05-2019 14:00:00",
format = "%d-%m-%Y %H:%M:%S")
# calculate detailed itineraries
dit <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
shortest_path = FALSE,
verbose = FALSE)
head(dit)
# set inputs
origins <- poi[25,]
# calculate detailed itineraries
dit <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
shortest_path = FALSE,
verbose = FALSE)
head(dit)
poi
# set inputs
origins <- poi[15,]
# calculate detailed itineraries
dit <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
shortest_path = FALSE,
verbose = FALSE)
head(dit)
head(poi)
head(centroids)
destinations <- poi[18,]
# calculate detailed itineraries
dit <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
shortest_path = FALSE,
verbose = FALSE)
destinations <- poi[5,]
# calculate detailed itineraries
dit <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
shortest_path = FALSE,
verbose = FALSE)
head(dit)
head(centroids)
nrow(centroids)
origins = sample(centroids, 10, replace = TRUE)
origins
origins = centroids[sample(nrow(centroids), 5), ]
origins
origins = centroids[sample(nrow(centroids), 10), ]
origins
destinations = centroids[sample(nrow(centroids), 10), ]
destinations
stop_r5(r5r_core)
rJava::.jgc(R.gc = TRUE)
options(java.parameters = "-Xmx2G")
library(r5r)
library(sf)
library(data.table)
library(ggplot2)
library(mapview)
mapviewOptions(platform = 'leafgl')
