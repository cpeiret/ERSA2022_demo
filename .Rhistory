library(leafletplugins)
install.packages('leafletplugins')
library(leafletplugins)
install.packages(c("bayesplot", "blogdown", "bookdown", "brew", "broom", "carData", "caret", "circlize", "clipr", "colorspace", "commonmark", "conquer", "countrycode", "crayon", "desc", "dplyr", "DT", "dtplyr", "eurostat", "evaluate", "expss", "fansi", "foreach", "future", "generics", "geojsonsf", "gert", "glue", "gower", "gstat", "hash", "htmlTable", "httpuv", "igraph", "insight", "iterators", "jqr", "jsonlite", "knitr", "leaflet", "lme4", "lmtest", "loo", "magrittr", "mapproj", "mapsf", "maptools", "MASS", "Matrix", "mgcv", "nlme", "nloptr", "openssl", "osmdata", "osrm", "pander", "pillar", "plm", "plyr", "processx", "psych", "quantreg", "r5r", "raster", "Rcpp", "RcppArmadillo", "RcppParallel", "RcppSimdJson", "RcppThread", "Rdpack", "readr", "readxl", "recipes", "rgdal", "rgrass7", "rjson", "rlang", "rmarkdown", "rsoi", "RSQLite", "Rttf2pt1", "sass", "sf", "shinystan", "showtext", "spacetime", "spatstat", "spatstat.core", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spdep", "stargazer", "stplanr", "survival", "svglite", "sysfonts", "systemfonts", "terra", "testthat", "tidyr", "tidyselect", "tigris", "tinytex", "tmap", "tseries", "tzdb", "units", "uuid", "V8", "vctrs", "waldo", "withr", "wk", "xaringan", "xfun", "XML"))
install.packages("leafletplugins")
install.packages("leaflet.extras")
library(leaflet.extras)
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/website/map_test')
head(adults_i)
head(test)
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/website/map_test')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/website/map_test')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/website/map_test')
library(tmap)
library(spData)
library(dplyr)
pois = st_read('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/2022_gisruk/2022_gisruk/data/pois.gpkg',
layer = 'pois')
head(pois)
destinations = st_read('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/2022_gisruk/2022_gisruk/data/destinations.gpkg',
layer = 'destinations')
head(destinations)
destinations = st_read('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/2022_gisruk/2022_gisruk/data/destinations.gpkg',
layer = 'destinations')
head(destinations)
tm_shape(destinations) +
tm_dots()
tm_shape(destinations) +
tm_dots(col = 'groupname')
destinations %>% filter(refToGreenspaceSite != NaN)
ifelse(destinations$refToGreenspaceSite != NaN, 'Park')
ifelse(destinations$refToGreenspaceSite != NaN, 'Park', destinations$groupname)
ifelse(destinations$refToGreenspaceSite == NaN, 'Park', destinations$groupname)
ifelse(destinations$refToGreenspaceSite = NaN, 'Park', destinations$groupname)
ifelse(destinations$refToGreenspaceSite != NaN, destinations$groupname, 'Park')
ifelse(destinations$refToGreenspaceSite != NA, destinations$groupname, 'Park')
# fill in NAs
test = destinations
test$groupname = ifelse(destinations$groupname != NA, destinations$groupname, 'Park')
head(test)
test %>% filter(refToGreenspaceSite != NA)
test %>% filter(refToGreenspaceSite != NaN)
destinations = st_read('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/2022_gisruk/2022_gisruk/data/destinations.gpkg',
layer = 'destinations')
# fill in NAs
test = destinations
test$groupname = ifelse(destinations$groupname != "<NA>", destinations$groupname, 'Park')
test %>% filter(groupname == 'Park')
head(test)
test$groupname = ifelse(destinations$groupname != <NA>, destinations$groupname, 'Park')
test$groupname = ifelse(destinations$refToGreenspaceSite != "<NA>", destinations$groupname, 'Park')
test %>% filter(groupname == 'Park')
test$groupname = ifelse(destinations$refToGreenspaceSite != NA, destinations$groupname, 'Park')
test %>% filter(groupname == 'Park')
head(destinations)
table(destinations$groupname)
table(is.na(destinations$groupname))
ifelse(is.na(destinations$refToGreenspaceSite), destinations$groupname, 'Park')
test$groupname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$groupname, 'Park')
test %>% filter(groupname == 'Park')
test$groupname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$groupname, 'Park')
test$categoryname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$categoryname, 'Park')
test$classname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$classname, 'Park')
test %>% filter(groupname == 'Park')
destinations$groupname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$groupname, 'Park')
destinations$categoryname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$categoryname, 'Park')
destinations$classname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$classname, 'Park')
tm_shape(destinations) +
tm_dots(col = 'groupname')
unique(destinations$groupname)
length(unique(destinations$groupname))
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#001219', '#001219','#001219','#001219','#001219','#001219'))
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#001219', '#0A9396','#E9D8A6','#EE9B00','#BB3E03','#9B2226'))
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'))
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('groupname', 'classname'))
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
)
head(destinations)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname')
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname')
destinations = st_read('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/2022_gisruk/2022_gisruk/data/destinations.gpkg',
layer = 'destinations')
# fill in NAs
destinations$groupname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$groupname, 'Park entrance')
destinations$categoryname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$categoryname, 'Park entrance')
destinations$classname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$classname, 'Park entrance')
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname')
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname') +
tm_view(dot.size.fixed = TRUE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname') +
tm_view(dot.size.fixed = FALSE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 5) +
tm_view(dot.size.fixed = FALSE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 1) +
tm_view(dot.size.fixed = FALSE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.5) +
tm_view(dot.size.fixed = FALSE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.5) +
tm_view(dot.size.fixed = TRUE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.01) +
tm_view(dot.size.fixed = TRUE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.05) +
tm_view(dot.size.fixed = TRUE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.05) +
tm_view(dot.size.fixed = FALSE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.05) +
tm_view(dot.size.fixed = FALSE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.05) +
tm_view(dot.size.fixed = FALSE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.05) +
tm_view(dot.size.fixed = FALSE)
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.05) +
tm_view(dot.size.fixed = FALSE)
# plot data
tmap_mode('plot')
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.05) +
tm_view(dot.size.fixed = FALSE)
# plot data
tmap_mode('view')
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.05) +
tm_view(dot.size.fixed = FALSE)
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/website/map_test')
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.05) +
tm_view(dot.size.fixed = FALSE)
# load libraries
library(tmap)
library(spData)
library(dplyr)
# load data
adults_i = st_read('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/2022_gisruk/2022_gisruk/results/access_score_adults.gpkg',
layer = 'access_score_adults')
seniors_i = st_read('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/2022_gisruk/2022_gisruk/results/access_score_seniors.gpkg',
layer = 'access_score_seniors')
# prepare data (add quantiles)
adults_i$quartile = ntile(adults_i$access_score, 4)
adults_i$access_cat = ifelse(adults_i$quartile == 1, 'low access',
ifelse(adults_i$quartile == 2, 'mid-low access',
ifelse(adults_i$quartile == 3, 'mid-high access',
'high access')))
# separate into layers
low_access = adults_i %>% filter(access_cat == 'low access')
mid_low_access = adults_i %>% filter(access_cat == 'mid-low access')
mid_high_access = adults_i %>% filter(access_cat == 'mid-high access')
high_access = adults_i %>% filter(access_cat == 'high access')
# map
m_low = tm_shape(low_access) +
tm_dots(col = '#ae2012',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midlow = tm_shape(mid_low_access) +
tm_dots(col = '#ee9b00',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midhigh = tm_shape(mid_high_access) +
tm_dots(col = '#94d2bd',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_high = tm_shape(high_access) +
tm_dots(col = '#005f73',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
(map_adults = m_low +
m_midlow +
m_midhigh +
m_high +
tm_add_legend(labels = c('Low access', 'Mid-low access', 'Mid-high access', 'High access'),
col = c('#ae2012','#ee9b00','#94d2bd','#005f73')) +
tm_view(symbol.size.fixed = TRUE))
tmap_mode('view')
(map_adults = m_low +
m_midlow +
m_midhigh +
m_high +
tm_add_legend(labels = c('Low access', 'Mid-low access', 'Mid-high access', 'High access'),
col = c('#ae2012','#ee9b00','#94d2bd','#005f73')) +
tm_view(symbol.size.fixed = TRUE))
seniors_i$quartile = ntile(seniors_i$access_score, 4)
(map_seniors = m_low +
m_midlow +
m_midhigh +
m_high +
tm_add_legend(labels = c('Low access', 'Mid-low access', 'Mid-high access', 'High access'),
col = c('#ae2012','#ee9b00','#94d2bd','#005f73')) +
tm_view(symbol.size.fixed = TRUE))
seniors_i$quartile = ntile(seniors_i$access_score, 4)
seniors_i$access_cat = ifelse(seniors_i$quartile == 1, 'low access',
ifelse(seniors_i$quartile == 2, 'mid-low access',
ifelse(seniors_i$quartile == 3, 'mid-high access',
'high access')))
# separate into layers
low_access = seniors_i %>% filter(access_cat == 'low access')
mid_low_access = seniors_i %>% filter(access_cat == 'mid-low access')
mid_high_access = seniors_i %>% filter(access_cat == 'mid-high access')
high_access = seniors_i %>% filter(access_cat == 'high access')
# map
m_low = tm_shape(low_access) +
tm_dots(col = '#ae2012',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midlow = tm_shape(mid_low_access) +
tm_dots(col = '#ee9b00',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midhigh = tm_shape(mid_high_access) +
tm_dots(col = '#94d2bd',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_high = tm_shape(high_access) +
tm_dots(col = '#005f73',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
(map_seniors = m_low +
m_midlow +
m_midhigh +
m_high +
tm_add_legend(labels = c('Low access', 'Mid-low access', 'Mid-high access', 'High access'),
col = c('#ae2012','#ee9b00','#94d2bd','#005f73')) +
tm_view(symbol.size.fixed = TRUE))
(map_adults = m_low +
m_midlow +
m_midhigh +
m_high +
tm_add_legend(labels = c('Low access', 'Mid-low access', 'Mid-high access', 'High access'),
col = c('#ae2012','#ee9b00','#94d2bd','#005f73')) +
tm_view(symbol.size.fixed = TRUE))
adults_i$quartile = ntile(adults_i$access_score, 4)
adults_i$access_cat = ifelse(adults_i$quartile == 1, 'low access',
ifelse(adults_i$quartile == 2, 'mid-low access',
ifelse(adults_i$quartile == 3, 'mid-high access',
'high access')))
# separate into layers
low_access = adults_i %>% filter(access_cat == 'low access')
mid_low_access = adults_i %>% filter(access_cat == 'mid-low access')
mid_high_access = adults_i %>% filter(access_cat == 'mid-high access')
high_access = adults_i %>% filter(access_cat == 'high access')
# map
m_low = tm_shape(low_access) +
tm_dots(col = '#ae2012',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midlow = tm_shape(mid_low_access) +
tm_dots(col = '#ee9b00',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midhigh = tm_shape(mid_high_access) +
tm_dots(col = '#94d2bd',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_high = tm_shape(high_access) +
tm_dots(col = '#005f73',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
(map_adults = m_low +
m_midlow +
m_midhigh +
m_high +
tm_add_legend(labels = c('Low access', 'Mid-low access', 'Mid-high access', 'High access'),
col = c('#ae2012','#ee9b00','#94d2bd','#005f73')) +
tm_view(symbol.size.fixed = TRUE))
# results seniors
# prepare data (add quantiles)
seniors_i$quartile = ntile(seniors_i$access_score, 4)
seniors_i$access_cat = ifelse(seniors_i$quartile == 1, 'low access',
ifelse(seniors_i$quartile == 2, 'mid-low access',
ifelse(seniors_i$quartile == 3, 'mid-high access',
'high access')))
# separate into layers
low_access = seniors_i %>% filter(access_cat == 'low access')
mid_low_access = seniors_i %>% filter(access_cat == 'mid-low access')
mid_high_access = seniors_i %>% filter(access_cat == 'mid-high access')
high_access = seniors_i %>% filter(access_cat == 'high access')
# map
m_low = tm_shape(low_access) +
tm_dots(col = '#ae2012',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midlow = tm_shape(mid_low_access) +
tm_dots(col = '#ee9b00',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midhigh = tm_shape(mid_high_access) +
tm_dots(col = '#94d2bd',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_high = tm_shape(high_access) +
tm_dots(col = '#005f73',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
(map_seniors = m_low +
m_midlow +
m_midhigh +
m_high +
tm_add_legend(labels = c('Low access', 'Mid-low access', 'Mid-high access', 'High access'),
col = c('#ae2012','#ee9b00','#94d2bd','#005f73')) +
tm_view(symbol.size.fixed = TRUE))
# load data
adults_i = st_read('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/2022_gisruk/2022_gisruk/results/access_score_adults.gpkg',
layer = 'access_score_adults')
seniors_i = st_read('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/2022_gisruk/2022_gisruk/results/access_score_seniors.gpkg',
layer = 'access_score_seniors')
# results adults
# prepare data (add quantiles)
adults_i$quartile = ntile(adults_i$access_score, 4)
adults_i$access_cat = ifelse(adults_i$quartile == 1, 'low access',
ifelse(adults_i$quartile == 2, 'mid-low access',
ifelse(adults_i$quartile == 3, 'mid-high access',
'high access')))
# separate into layers
low_access = adults_i %>% filter(access_cat == 'low access')
mid_low_access = adults_i %>% filter(access_cat == 'mid-low access')
mid_high_access = adults_i %>% filter(access_cat == 'mid-high access')
high_access = adults_i %>% filter(access_cat == 'high access')
# map
m_low = tm_shape(low_access) +
tm_dots(col = '#ae2012',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midlow = tm_shape(mid_low_access) +
tm_dots(col = '#ee9b00',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_midhigh = tm_shape(mid_high_access) +
tm_dots(col = '#94d2bd',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
m_high = tm_shape(high_access) +
tm_dots(col = '#005f73',
popup.vars = c('Accessibility score' = 'access_score', 'Postcode' = 'Postcode'),
id = 'Postcode')
(map_adults = m_low +
m_midlow +
m_midhigh +
m_high +
tm_add_legend(labels = c('Low access', 'Mid-low access', 'Mid-high access', 'High access'),
col = c('#ae2012','#ee9b00','#94d2bd','#005f73')) +
tm_view(symbol.size.fixed = TRUE))
# load libraries
library(tmap)
library(spData)
library(dplyr)
# load data
destinations = st_read('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/2022_gisruk/2022_gisruk/data/destinations.gpkg',
layer = 'destinations')
# fill in NAs
destinations$groupname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$groupname, 'Park entrance')
destinations$categoryname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$categoryname, 'Park entrance')
destinations$classname = ifelse(is.na(destinations$refToGreenspaceSite), destinations$classname, 'Park entrance')
# plot data
tmap_mode('view')
tm_shape(destinations) +
tm_dots(col = 'groupname', palette = c('#F94144', '#577590','#F8961E','#43AA8B','#F9C74F','#90BE6D'),
popup.vars = c('Category' = 'groupname', 'Amenity' = 'classname'),
id = 'classname',
size = 0.05) +
tm_view(dot.size.fixed = FALSE)
uktus15_diary_ep_long <- read.delim("C:/Users/b9066009/Documents/PhD/data/time_use_survey/tab/uktus15_diary_ep_long.tab")
View(uktus15_diary_ep_long)
uktus15_diary_wide <- read.delim("C:/Users/b9066009/Documents/PhD/data/time_use_survey/tab/uktus15_diary_wide.tab")
View(uktus15_diary_wide)
uktus15_dv_time_vars <- read.delim("C:/Users/b9066009/Documents/PhD/data/time_use_survey/tab/uktus15_dv_time_vars.tab")
View(uktus15_dv_time_vars)
uktus15_household <- read.delim("C:/Users/b9066009/Documents/PhD/data/time_use_survey/tab/uktus15_household.tab")
View(uktus15_household)
uktus15_individual <- read.delim("C:/Users/b9066009/Documents/PhD/data/time_use_survey/tab/uktus15_individual.tab")
View(uktus15_individual)
uktus15_wksched <- read.delim("C:/Users/b9066009/Documents/PhD/data/time_use_survey/tab/uktus15_wksched.tab")
View(uktus15_wksched)
library(dplyr)
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
library(dplyr)
update.packages('rlang')
library(dplyr)
install.packages('rlang')
install.packages("rlang")
library(dplyr)
library(dplyr)
library(dplyr)
install.packages('rlang')
install.packages("rlang")
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
remove.packages('rlang')
setwd('C:/Users/b9066009/Documents/PhD/01_access_morphometrics/ERSA2022_demo')
# load libraries
library(dplyr)
library(sf)
library(osmextract)
library(arrow)
# load data
sa_buf = read_parquet('./data/sa_buf.parquet') # load study area
sa_buf
plot(sa_buf)
plot(st_geometry(sa_buf))
plot(st_geometry(sa_buf))
plot(st_geometry(sa_buf$geometry))
plot(sa_buf$geometry)
class(sa_buf)
library(sfarrow)
# load data
sa_buf = st_read_parquet('./data/sa_buf.parquet') # load study area
class(sa_buf)
plot(sa_buf)
plot(sa_buf$geometry)
# get street network for our study area
streets = oe_get_network(sa_buf, mode = 'walking')
plot(streets$geometry)
test = st_intersection(streets, sa_buf)
plot(test$geometry)
# get street network from OSM
streets_osm = oe_get_network(sa_buf, mode = 'walking')
# clip streets to our study area
streets = st_intersection(streets, sa_buf)
class(streets)
class(streets_osm)
# get street network from OSM
streets_osm = oe_get_network(sa_buf, mode = 'walking', download_directory = './data')
# get street network from OSM
streets_osm = oe_get_network(sa_buf, mode = 'walking', download_directory = oe_download_directory('./data'))
# get street network from OSM
streets_osm = oe_get_network(sa_buf, mode = 'walking', download_directory = oe_download_directory())
oe_download_directory()
oe_download_directory('./data/sa_buf.parquet')
oe_download_directory('./data')
oe_find(streets_osm)
# get street network from OSM
streets_osm = oe_get_network(sa_buf, mode = 'walking')
# set up download directory
usethis::edit_r_environ()
# get street network from OSM
streets_osm = oe_get_network(sa_buf, mode = 'walking')
oe_download_directory()
