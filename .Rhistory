mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
verbose = FALSE)
head(ttm)
stop_r5(r5r_core)
rJava::.jgc(R.gc = TRUE)
options(java.parameters = "-Xmx2G")
# load libraries
library(r5r)
library(sf)
library(data.table)
library(ggplot2)
library(mapview)
mapviewOptions(platform = 'leafgl')
data_path <- system.file("extdata/poa", package = "r5r")
list.files(data_path)
# r5r setup
r5r_core = setup_r5(data_path, elevation = 'TOBLER', overwrite = T)
poi <- fread(file.path(data_path, "poa_points_of_interest.csv"))
points <- fread(file.path(data_path, "poa_hexgrid.csv"))
points <- points[ c(sample(1:nrow(points), 10, replace=TRUE)), ]
mode <- c("WALK", "TRANSIT")
max_walk_dist <- 5000
max_trip_duration <- 120
departure_datetime <- as.POSIXct("13-05-2019 14:00:00",
format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm_2 <- travel_time_matrix(r5r_core = r5r_core,
origins = points,
destinations = points,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
verbose = FALSE)
head(ttm)
stop_r5(r5r_core)
rJava::.jgc(R.gc = TRUE)
# r5r setup
r5r_core = setup_r5(data_path, elevation = 'TOBLER', overwrite = T)
options(java.parameters = "-Xmx2G")
# load libraries
library(r5r)
library(sf)
library(data.table)
library(ggplot2)
library(mapview)
mapviewOptions(platform = 'leafgl')
data_path <- system.file("extdata/poa", package = "r5r")
list.files(data_path)
# r5r setup
r5r_core = setup_r5(data_path, elevation = 'TOBLER', overwrite = T)
poi <- fread(file.path(data_path, "poa_points_of_interest.csv"))
points <- fread(file.path(data_path, "poa_hexgrid.csv"))
points <- points[ c(sample(1:nrow(points), 10, replace=TRUE)), ]
mode <- c("WALK", "TRANSIT")
max_walk_dist <- 5000
max_trip_duration <- 120
departure_datetime <- as.POSIXct("13-05-2019 14:00:00",
format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm_2 <- travel_time_matrix(r5r_core = r5r_core,
origins = points,
destinations = points,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
verbose = FALSE)
head(ttm)
stop_r5(r5r_core)
rJava::.jgc(R.gc = TRUE)
head(ttm)
head(ttm_2)
merge(ttm,ttm_2,by = 'from_id')
c.
class(ttm)
travel_time_p50
nrow(ttm)
nrow(ttm_2)
View(ttm)
View(ttm)
View(ttm_2)
ttm %>% filter(from_id = '89a90128ccbffff')
ttm %>% filter(from_id == '89a90128ccbffff')
ttm %>% filter('from_id' == '89a90128ccbffff')
ttm %>% filter(from_id == '89a9012880bffff')
filter(ttm$from_id == '89a9012880bffff')
?filter
filter(ttm, from_id == '89a9012880bffff')
filter(ttm, from_id == 89a9012880bffff)
filter(ttm, from_id == '89a9012880bffff')
class(ttm)
as.data.frame(ttm)
ttm = as.data.frame(ttm)
ttm %>% filter(from_id == '89a9012880bffff')
ttm %>% dplyr::filter(from_id == '89a9012880bffff')
test_ttm = ttm %>% dplyr::filter(from_id == '89a9012880bffff')
test_ttm_2 = ttm_2 %>% dplyr::filter(from_id == '89a9012880bffff')
View(ttm_2)
options(java.parameters = "-Xmx2G")
# load libraries
library(r5r)
library(sf)
library(data.table)
library(ggplot2)
library(mapview)
mapviewOptions(platform = 'leafgl')
data_path <- system.file("extdata/poa", package = "r5r")
list.files(data_path)
# r5r setup
r5r_core = setup_r5(data_path, elevation = 'TOBLER', overwrite = T)
poi <- fread(file.path(data_path, "poa_points_of_interest.csv"))
points <- fread(file.path(data_path, "poa_hexgrid.csv"))
points <- points[ c(sample(1:nrow(points), 10, replace=TRUE)), ]
mode <- c("WALK", "TRANSIT")
max_walk_dist <- 5000
max_trip_duration <- 120
departure_datetime <- as.POSIXct("13-05-2019 14:00:00",
format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm_2 <- travel_time_matrix(r5r_core = r5r_core,
origins = points,
destinations = points,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
verbose = FALSE)
stop_r5(r5r_core)
rJava::.jgc(R.gc = TRUE)
stop_r5(r5r_core)
rJava::.jgc(R.gc = TRUE)
# r5r setup
r5r_core = setup_r5(data_path, elevation = 'NONE', overwrite = T)
options(java.parameters = "-Xmx2G")
# load libraries
library(r5r)
library(sf)
library(data.table)
library(ggplot2)
library(mapview)
mapviewOptions(platform = 'leafgl')
# r5r setup
r5r_core = setup_r5(data_path, elevation = 'NONE', overwrite = T)
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = points,
destinations = points,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
verbose = FALSE)
stop_r5(r5r_core)
rJava::.jgc(R.gc = TRUE)
View(ttm)
View(ttm_2)
# load data
centroids = st_read_parquet('./data/centroids.parquet') # our origins and destinations
# clean data
centroids = st_transform(centroids, crs = 4326)
centroids = centroids %>% rename(id = X__index_level_0__)
centroids <- centroids %>%
mutate(lon = unlist(map(centroids$geometry,1)),
lat = unlist(map(centroids$geometry,2)))
centroids = st_set_geometry(centroids,NULL)
# r5r setup
r5r_core = setup_r5('./data/pbf', elevation = 'NONE')
# load libraries
library(osmextract)
library(sfarrow)
library(sf)
library(r5r)
library(dplyr)
library(tidyverse)
library(rgdal)
stop_r5(r5r_core)
rJava::.jgc(R.gc = TRUE)
options(java.parameters = "-Xmx2G")
# load libraries
library(osmextract)
library(sfarrow)
library(sf)
library(r5r)
library(dplyr)
library(tidyverse)
library(rgdal)
# load data
centroids = st_read_parquet('./data/centroids.parquet') # our origins and destinations
# clean data
centroids = st_transform(centroids, crs = 4326)
centroids = centroids %>% rename(id = X__index_level_0__)
centroids <- centroids %>%
mutate(lon = unlist(map(centroids$geometry,1)),
lat = unlist(map(centroids$geometry,2)))
centroids = st_set_geometry(centroids,NULL)
# r5r setup
r5r_core = setup_r5('./data/pbf', elevation = 'NONE')
# sample origins and destinations
origins = centroids[sample(nrow(centroids), 100), ]
destinations = centroids[sample(nrow(centroids), 100), ]
# set up parametres
departure_datetime <- as.POSIXct("13-05-2019 14:00:00",
format = "%d-%m-%Y %H:%M:%S")
# routing analysis
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = 'WALK',
departure_datetime = departure_datetime,
max_walk_dist = 2000,
max_trip_duration = 15,
verbose = FALSE,
)
stop_r5(r5r_core)
rJava::.jgc(R.gc = TRUE)
options(java.parameters = "-Xmx2G")
# load libraries
library(osmextract)
library(sfarrow)
library(sf)
library(r5r)
library(dplyr)
library(tidyverse)
library(rgdal)
# load data
centroids = st_read_parquet('./data/centroids.parquet') # our origins and destinations
# clean data
centroids = st_transform(centroids, crs = 4326)
centroids = centroids %>% rename(id = X__index_level_0__)
centroids <- centroids %>%
mutate(lon = unlist(map(centroids$geometry,1)),
lat = unlist(map(centroids$geometry,2)))
centroids = st_set_geometry(centroids,NULL)
# r5r setup
r5r_core = setup_r5('./data/pbf', elevation = 'NONE', overwrite = T)
# sample origins and destinations
origins = centroids[sample(nrow(centroids), 100), ]
destinations = centroids[sample(nrow(centroids), 100), ]
# set up parametres
departure_datetime <- as.POSIXct("13-05-2019 14:00:00",
format = "%d-%m-%Y %H:%M:%S")
# routing analysis
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = 'WALK',
departure_datetime = departure_datetime,
max_walk_dist = 2000,
max_trip_duration = 15,
verbose = FALSE,
)
stop_r5(r5r_core)
rJava::.jgc(R.gc = TRUE)
options(java.parameters = "-Xmx2G")
# load libraries
library(osmextract)
library(sfarrow)
library(sf)
library(r5r)
library(dplyr)
library(tidyverse)
library(rgdal)
# load data
centroids = st_read_parquet('./data/centroids.parquet') # our origins and destinations
# clean data
centroids = st_transform(centroids, crs = 4326)
centroids = centroids %>% rename(id = X__index_level_0__)
centroids <- centroids %>%
mutate(lon = unlist(map(centroids$geometry,1)),
lat = unlist(map(centroids$geometry,2)))
centroids = st_set_geometry(centroids,NULL)
# r5r setup
r5r_core = setup_r5('./data/pbf', elevation = 'NONE', overwrite = T)
# sample origins and destinations
origins = centroids[sample(nrow(centroids), 100), ]
destinations = centroids[sample(nrow(centroids), 100), ]
# set up parametres
departure_datetime <- as.POSIXct("13-05-2019 14:00:00",
format = "%d-%m-%Y %H:%M:%S")
# routing analysis
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = 'WALK',
departure_datetime = departure_datetime,
max_walk_dist = 2000,
max_trip_duration = 15,
verbose = FALSE,
)
stop_r5(r5r_core)
rJava::.jgc(R.gc = TRUE)
options(java.parameters = "-Xmx2G")
# load libraries
library(osmextract)
library(sfarrow)
library(sf)
library(r5r)
library(dplyr)
library(tidyverse)
library(rgdal)
# load data
centroids = st_read_parquet('./data/centroids.parquet') # our origins and destinations
# clean data
centroids = st_transform(centroids, crs = 4326)
centroids = centroids %>% rename(id = X__index_level_0__)
centroids <- centroids %>%
mutate(lon = unlist(map(centroids$geometry,1)),
lat = unlist(map(centroids$geometry,2)))
centroids = st_set_geometry(centroids,NULL)
# r5r setup
r5r_core = setup_r5('./data/pbf', elevation = 'TOBLER', overwrite = T)
# sample origins and destinations
origins = centroids[sample(nrow(centroids), 100), ]
destinations = centroids[sample(nrow(centroids), 100), ]
# set up parametres
departure_datetime <- as.POSIXct("13-05-2019 14:00:00",
format = "%d-%m-%Y %H:%M:%S")
# routing analysis
ttm_elevation <- travel_time_matrix(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = 'WALK',
departure_datetime = departure_datetime,
max_walk_dist = 2000,
max_trip_duration = 15,
verbose = FALSE,
)
stop_r5(r5r_core)
rJava::.jgc(R.gc = TRUE)
options(java.parameters = "-Xmx2G")
# load libraries
library(osmextract)
library(sfarrow)
library(sf)
library(r5r)
library(dplyr)
library(tidyverse)
library(rgdal)
# load data
centroids = st_read_parquet('./data/centroids.parquet') # our origins and destinations
# clean data
centroids = st_transform(centroids, crs = 4326)
centroids = centroids %>% rename(id = X__index_level_0__)
centroids <- centroids %>%
mutate(lon = unlist(map(centroids$geometry,1)),
lat = unlist(map(centroids$geometry,2)))
centroids = st_set_geometry(centroids,NULL)
# r5r setup
r5r_core = setup_r5('./data/pbf', elevation = 'TOBLER', overwrite = T)
# sample origins and destinations
origins = centroids[sample(nrow(centroids), 100), ]
destinations = centroids[sample(nrow(centroids), 100), ]
# set up parametres
departure_datetime <- as.POSIXct("13-05-2019 14:00:00",
format = "%d-%m-%Y %H:%M:%S")
# routing analysis
ttm_elevation <- travel_time_matrix(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = 'WALK',
departure_datetime = departure_datetime,
max_walk_dist = 2000,
max_trip_duration = 15,
verbose = FALSE,
)
stop_r5(r5r_core)
rJava::.jgc(R.gc = TRUE)
options(java.parameters = "-Xmx2G")
# load libraries
library(osmextract)
library(sfarrow)
library(sf)
library(r5r)
library(dplyr)
library(tidyverse)
library(rgdal)
# load data
centroids = st_read_parquet('./data/centroids.parquet') # our origins and destinations
# clean data
centroids = st_transform(centroids, crs = 4326)
centroids = centroids %>% rename(id = X__index_level_0__)
centroids <- centroids %>%
mutate(lon = unlist(map(centroids$geometry,1)),
lat = unlist(map(centroids$geometry,2)))
centroids = st_set_geometry(centroids,NULL)
# r5r setup
r5r_core = setup_r5('./data/pbf', elevation = 'TOBLER', overwrite = T)
# sample origins and destinations
origins = centroids[sample(nrow(centroids), 100), ]
destinations = centroids[sample(nrow(centroids), 100), ]
# set up parametres
departure_datetime <- as.POSIXct("13-05-2019 14:00:00",
format = "%d-%m-%Y %H:%M:%S")
# routing analysis
ttm_elevation <- travel_time_matrix(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = 'WALK',
departure_datetime = departure_datetime,
max_walk_dist = 2000,
max_trip_duration = 15,
verbose = FALSE,
)
stop_r5(r5r_core)
rJava::.jgc(R.gc = TRUE)
# r5r setup
r5r_core = setup_r5('./data/pbf', elevation = 'NONE', overwrite = T)
# load libraries
library(osmextract)
library(sfarrow)
library(sf)
library(r5r)
library(dplyr)
library(tidyverse)
library(rgdal)
# r5r setup
r5r_core = setup_r5('./data/pbf', elevation = 'NONE', overwrite = T)
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = 'WALK',
departure_datetime = departure_datetime,
max_walk_dist = 2000,
max_trip_duration = 15,
verbose = FALSE,
)
stop_r5(r5r_core)
rJava::.jgc(R.gc = TRUE)
View(ttm)
View(ttm_elevation)
# r5r setup
r5r_core = setup_r5('./data/pbf', elevation = 'TOBLER', overwrite = T)
setwd('C:/Users/b9066009/Documents/PhD/01_access_morphometrics/ERSA2022_demo')
options(java.parameters = "-Xmx2G")
# load libraries
library(osmextract)
library(sfarrow)
library(sf)
library(r5r)
library(dplyr)
library(tidyverse)
library(rgdal)
# load data
centroids = st_read_parquet('./data/centroids.parquet') # our origins and destinations
centroids = st_transform(centroids, crs = 4326)
centroids = centroids %>% rename(id = X__index_level_0__)
centroids <- centroids %>%
mutate(lon = unlist(map(centroids$geometry,1)),
lat = unlist(map(centroids$geometry,2)))
centroids = st_set_geometry(centroids,NULL)
# r5r setup
r5r_core = setup_r5('./data/pbf', elevation = 'TOBLER', overwrite = T)
# set up parametres
departure_datetime <- as.POSIXct("13-05-2019 14:00:00",
format = "%d-%m-%Y %H:%M:%S")
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = 'WALK',
departure_datetime = departure_datetime,
max_walk_dist = 2000,
max_trip_duration = 15,
verbose = FALSE,
walk_speed = c(4.5, 3.2)
)
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = centroids,
mode = 'WALK',
departure_datetime = departure_datetime,
max_walk_dist = 2000,
max_trip_duration = 15,
verbose = FALSE,
walk_speed = c(4.5, 3.2)
)
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = centroids,
mode = 'WALK',
departure_datetime = departure_datetime,
max_walk_dist = 2000,
max_trip_duration = 15,
verbose = FALSE,
walk_speed = 4.5
)
ttm_seniors <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = centroids,
mode = 'WALK',
departure_datetime = departure_datetime,
max_walk_dist = 2000,
max_trip_duration = 15,
verbose = FALSE,
walk_speed = 3.2
)
head(ttm)
# merge access score with polygons layer
hexagons = st_read_parquet('./data/hexagons.parquet') # load polygons layer
as.data.frame(table(ttm$from_id))
access_score_adults = as.data.frame(table(ttm$from_id))
access_score_seniors = as.data.frame(table(ttm_seniors$from_id))
merge(hexagons, access_score_adults, by.x = 'hex_id', by.y = 'Var1')
hexagons = merge(hexagons, access_score_adults, by.x = 'hex_id', by.y = 'Var1') # merge
hexagons = hexagons %>% rename('access_adults' = 'Freq') # rename variable
merge(hexagons, access_score_seniors, by.x = 'hex_id', by.y = 'Var1')
hexagons = merge(hexagons, access_score_seniors, by.x = 'hex_id', by.y = 'Var1') # merge
hexagons = hexagons %>% rename('access_seniors' = 'Freq') # rename variable
st_write_parquet(hexagons, './results/hexagons_access.parquet') # save to parquet
